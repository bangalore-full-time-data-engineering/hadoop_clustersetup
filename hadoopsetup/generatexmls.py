#!/usr/bin/env python3

from xml.etree.ElementTree import Element, SubElement, Comment, ElementTree, tostring
from xml.dom import minidom

#Generating core-site.xml

f = open("hadoopcluster.conf",'r')
confvalue = f.readlines()
f.close()

masterhostname = confvalue[0].split()[1]
slave1hostname = confvalue[2].split()[1]
slave2hostname = confvalue[3].split()[1]

configuration = Element('configuration')
comment = Comment('core-site.xml Generated by Byte Academy !')
configuration.append(comment)

property1 = SubElement(configuration, 'property')
property1name = SubElement(property1,'name')
property1name.text = 'fs.defaultFS'
property1value = SubElement(property1,'value')
property1value.text = 'hdfs://' + masterhostname + ':8020/'

property2 = SubElement(configuration,'property')
property2name = SubElement(property2,'name')
property2name.text = 'io.file.buffer.size'
property2value = SubElement(property2,'value')
property2value.text = str(131072)

rough_string = tostring(configuration, 'utf-8')
reparsed = minidom.parseString(rough_string)
pretty = reparsed.toprettyxml(indent="  ")

with open('core-site.xml','w') as f:
	f.write(pretty)

#print(pretty)

#Generating hdfs-site.xml

configuration = Element('configuration')
comment = Comment('hdfs-site.xml Generated by Byte Academy !')
configuration.append(comment)

property1 = SubElement(configuration,'property')
property1name = SubElement(property1,'name') 
property1name.text = 'dfs.namenode.name.dir'
property1value = SubElement(property1,'value')
property1value.text = 'file:/usr/local/hadoop_work/hdfs/namenode'

property2 = SubElement(configuration,'property')
property2name = SubElement(property2,'name')
property2name.text = 'dfs.datanode.data.dir'
property2value = SubElement(property2,'value')
property2value.text = 'file:/usr/local/hadoop_work/hdfs/datanode'


property3 = SubElement(configuration,'property')
property3name = SubElement(property3,'name')
property3name.text = 'dfs.namenode.checkpoint.dir'
property3value = SubElement(property3,'value')
property3value.text = 'file:/usr/local/hadoop_work/hdfs/namesecondary'


property4 = SubElement(configuration,'property')
property4name = SubElement(property4,'name')
property4name.text = 'dfs.replication'
property4value = SubElement(property4,'value')
property4value.text = str(2)


property5 = SubElement(configuration,'property')
property5name = SubElement(property5,'name')
property5name.text = 'dfs.block.size'
property5value = SubElement(property5,'value')
property5value.text = str(134217728)

rough_string = tostring(configuration, 'utf-8')
reparsed = minidom.parseString(rough_string)
pretty = reparsed.toprettyxml(indent="  ")

with open('hdfs-site.xml','w') as f:
        f.write(pretty)

# Generationg yarn-site.xml

configuration = Element('configuration')
comment = Comment('yarn-site.xml Generated by Byte Academy !')
configuration.append(comment)


property1 = SubElement(configuration,'property')
property1name = SubElement(property1,'name')
property1name.text = 'yarn.resourcemanager.hostname'
property1value = SubElement(property1,'value')
property1value.text = masterhostname


property2 = SubElement(configuration,'property')
property2name = SubElement(property2,'name')
property2name.text = 'yarn.resourcemanager.bind-host'
property2value = SubElement(property2,'value')
property2value.text = '0.0.0.0'


property3 = SubElement(configuration,'property')
property3name = SubElement(property3,'name')
property3name.text = 'yarn.nodemanager.bind-host'
property3value = SubElement(property3,'value')
property3value.text = '0.0.0.0'


property4 = SubElement(configuration,'property')
property4name = SubElement(property4,'name')
property4name.text = 'yarn.nodemanager.aux-services'
property4value = SubElement(property4,'value')
property4value.text = 'mapreduce_shuffle'

property5 = SubElement(configuration,'property')
property5name = SubElement(property5,'name')
property5name.text = 'yarn.nodemanager.aux-services.mapreduce_shuffle.class'
property5value = SubElement(property5,'value')
property5value.text = 'org.apache.hadoop.mapred.ShuffleHandler'


property6 = SubElement(configuration,'property')
property6name = SubElement(property6,'name')
property6name.text = 'yarn.log-aggregation-enable'
property6value = SubElement(property6,'value')
property6value.text = 'true'

property7 = SubElement(configuration,'property')
property7name = SubElement(property7,'name')
property7name.text = 'yarn.nodemanager.local-dirs'
property7value = SubElement(property7,'value')
property7value.text = 'file:/usr/local/hadoop_work/yarn/local'


property8 = SubElement(configuration,'property')
property8name = SubElement(property8,'name')
property8name.text = 'yarn.nodemanager.log-dirs'
property8value = SubElement(property8,'value')
property8value.text = 'file:/usr/local/hadoop_work/yarn/log'

property9 = SubElement(configuration,'property')
property9name = SubElement(property9,'name')
property9name.text = 'yarn.nodemanager.remote-app-log-dir'
property9value = SubElement(property9,'value')
property9value.text = 'hdfs://' + masterhostname + ':8020/var/log/hadoop-yarn/apps'

rough_string = tostring(configuration, 'utf-8')
reparsed = minidom.parseString(rough_string)
pretty = reparsed.toprettyxml(indent="  ")

with open('yarn-site.xml','w') as f:
        f.write(pretty)


#Generating mapred-site.xml

configuration = Element('configuration')
comment = Comment('mapred-site.xml Generated by Byte Academy !')
configuration.append(comment)


property1 = SubElement(configuration,'property')
property1name = SubElement(property1,'name')
property1name.text = 'mapreduce.framework.name'
property1value = SubElement(property1,'value')
property1value.text = 'yarn'


property2 = SubElement(configuration,'property')
property2name = SubElement(property2,'name')
property2name.text = 'mapreduce.jobhistory.address'
property2value = SubElement(property2,'value')
property2value.text = masterhostname + ':10020'


property3 = SubElement(configuration,'property')
property3name = SubElement(property3,'name')
property3name.text = 'mapreduce.jobhistory.webapp.address'
property3value = SubElement(property3,'value')
property3value.text = masterhostname + ':19888'


property4 = SubElement(configuration,'property')
property4name = SubElement(property4,'name')
property4name.text = 'yarn.app.mapreduce.am.staging-dir'
property4value = SubElement(property4,'value')
property4value.text = '/user/app'

property5 = SubElement(configuration,'property')
property5name = SubElement(property5,'name')
property5name.text = 'mapred.child.java.opts'
property5value = SubElement(property5,'value')
property5value.text = '-Djava.security.egd=file:/dev/../dev/urandom'

rough_string = tostring(configuration, 'utf-8')
reparsed = minidom.parseString(rough_string)
pretty = reparsed.toprettyxml(indent="  ")

with open('mapred-site.xml','w') as f:
        f.write(pretty)

with open('masters','w') as f:
	f.write(masterhostname)

with open('slaves','w') as f:
	f.write(slave1hostname)
	f.write('\n')
	f.write(slave2hostname)
